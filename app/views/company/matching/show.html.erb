<div class="bg-white shadow rounded-lg p-6" data-turbolinks="false">
  <div class="flex justify-between items-start mb-6">
    <h1 class="text-2xl font-bold text-gray-800">個人プロフィール詳細</h1>
    
    <div class="flex space-x-2">
      <div class="like-button" data-user-id="<%= @user.id %>" data-job-id="<%= @job.id %>">
        <% if @liked %>
          <button class="unlike-btn bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg flex items-center">
            <i class="fas fa-heart mr-2"></i> いいね済み
          </button>
        <% else %>
          <button class="like-btn bg-gray-200 hover:bg-red-500 hover:text-white text-gray-700 font-medium py-2 px-4 rounded-lg flex items-center">
            <i class="far fa-heart mr-2"></i> いいね
          </button>
        <% end %>
      </div>
      
      <% 
        # マッチしている場合にメッセージボタンを表示
        matched = current_user.likes.exists?(target_user_id: @user.id, job_id: @job.id) && 
                @user.likes.exists?(job_id: @job.id)
        
        if matched
          conversation = Conversation.find_or_create_by(
            user_id: current_user.id,
            target_user_id: @user.id,
            job_id: @job.id
          )
      %>
        <%= link_to company_message_path(conversation), class: "bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg flex items-center" do %>
          <i class="fas fa-comment mr-2"></i> メッセージを送る
        <% end %>
      <% end %>
      
      <%= link_to "一覧に戻る", search_company_matching_index_path(job_id: @job_id), class: "bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg" %>
    </div>
  </div>
  
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <div class="lg:col-span-2">
      <div class="bg-gray-50 rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-700 mb-4">基本情報</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <% if @user.individual_profile&.display_name.present? %>
            <div>
              <span class="font-medium text-gray-600">表示名:</span>
              <span class="text-gray-800 ml-2"><%= @user.individual_profile.display_name %></span>
            </div>
          <% end %>
          
          <% if @user.individual_profile&.birth_year.present? %>
            <div>
              <span class="font-medium text-gray-600">年齢:</span>
              <span class="text-gray-800 ml-2"><%= Date.today.year - @user.individual_profile.birth_year %>歳</span>
            </div>
          <% end %>
          
          <% if @user.individual_profile&.desired_salary.present? %>
            <div>
              <span class="font-medium text-gray-600">希望年収:</span>
              <span class="text-gray-800 ml-2"><%= @user.individual_profile.desired_salary %>万円</span>
            </div>
          <% end %>
        </div>
      </div>
      
      <div class="bg-gray-50 rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-700 mb-4">スキル</h2>
        
        <% if @user.user_skills.any? %>
          <div class="flex flex-wrap gap-2 mb-4">
            <% @user.user_skills.includes(:skill).each do |user_skill| %>
              <div class="bg-blue-100 text-blue-800 rounded-lg px-3 py-1.5">
                <span class="font-medium"><%= user_skill.skill.name %></span>
                <span class="text-blue-600 ml-1">(Lv.<%= user_skill.level %>)</span>
              </div>
            <% end %>
          </div>
          
          <div class="mt-4 bg-gray-100 p-3 rounded-lg">
            <h3 class="font-medium text-gray-700 mb-2">スキルレベルの目安</h3>
            <ul class="text-sm text-gray-600 space-y-1">
              <% skill_level_definitions.each do |definition| %>
                <li><span class="font-medium">Lv.<%= definition[:level] %>:</span> <%= definition[:detailed] %></li>
              <% end %>
            </ul>
          </div>
        <% else %>
          <p class="text-gray-600">スキル情報はありません</p>
        <% end %>
      </div>
      
      <% if @user.individual_profile&.bio.present? %>
        <div class="bg-gray-50 rounded-lg p-6 mb-6">
          <h2 class="text-xl font-semibold text-gray-700 mb-4">自己紹介</h2>
          <p class="text-gray-800 whitespace-pre-line"><%= @user.individual_profile.bio %></p>
        </div>
      <% end %>
    </div>
    
    <div class="lg:col-span-1">
      <div class="bg-gray-50 rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-700 mb-4">選択中の求人</h2>
        
        <div class="mb-4">
          <h3 class="text-lg font-semibold text-gray-800 mb-2"><%= @job.title %></h3>
          <p class="text-gray-600 text-sm"><%= @job.description.truncate(100) %></p>
        </div>
        
        <div class="grid grid-cols-1 gap-2">
          <div class="flex items-center">
            <i class="fas fa-map-marker-alt text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">勤務地:</span>
            <span class="text-gray-800"><%= @job.location.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-briefcase text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">雇用形態:</span>
            <span class="text-gray-800"><%= @job.employment_type.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-laptop-house text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">勤務形態:</span>
            <span class="text-gray-800"><%= @job.work_style.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-yen-sign text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">給与:</span>
            <span class="text-gray-800"><%= number_with_delimiter(@job.salary) %>万円</span>
          </div>
        </div>
      </div>
      
      <div class="bg-blue-50 rounded-lg p-6">
        <h2 class="text-xl font-semibold text-blue-700 mb-4">マッチング状態</h2>
        
        <div class="flex justify-center mb-4">
          <% if @is_match %>
            <div class="w-24 h-24 rounded-full bg-green-100 border-4 border-green-500 flex items-center justify-center">
              <span class="text-2xl font-bold text-green-700">一致</span>
            </div>
          <% else %>
            <div class="w-24 h-24 rounded-full bg-gray-100 border-4 border-gray-500 flex items-center justify-center">
              <span class="text-2xl font-bold text-gray-700">不一致</span>
            </div>
          <% end %>
        </div>
        
        <div class="text-center mt-4">
          <p class="text-blue-800">
            <% if @is_match %>
              このユーザーと求人は条件が一致しています。
            <% else %>
              このユーザーと求人は条件の一部または全てが一致していません。
            <% end %>
          </p>
        </div>
      </div>
    </div>
  </div>
  
  <div class="mt-8">
    <div class="flex justify-between">
      <%= link_to "一覧に戻る", search_company_matching_index_path(job_id: @job_id), class: "bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg" %>
      
      <div class="like-button" data-user-id="<%= @user.id %>" data-job-id="<%= @job.id %>">
        <% if @liked %>
          <button class="unlike-btn bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg flex items-center">
            <i class="fas fa-heart mr-2"></i> いいね済み
          </button>
        <% else %>
          <button class="like-btn bg-gray-200 hover:bg-red-500 hover:text-white text-gray-700 font-medium py-2 px-4 rounded-lg flex items-center">
            <i class="far fa-heart mr-2"></i> いいね
          </button>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
function setupEventListeners() {
  // いいねボタンのイベントリスナー
  document.querySelectorAll('.like-btn').forEach(button => {
    button.removeEventListener('click', handleLike);
    button.addEventListener('click', handleLike);
  });
  
  // いいね解除ボタンのイベントリスナー
  document.querySelectorAll('.unlike-btn').forEach(button => {
    button.removeEventListener('click', handleUnlike);
    button.addEventListener('click', handleUnlike);
  });
}

function handleLike() {
  const userId = this.closest('.like-button').dataset.userId;
  const jobId = this.closest('.like-button').dataset.jobId;
  likeUser(userId, jobId);
}

function handleUnlike() {
  const userId = this.closest('.like-button').dataset.userId;
  const jobId = this.closest('.like-button').dataset.jobId;
  unlikeUser(userId, jobId);
}

// イベントリスナーの設定
document.addEventListener('DOMContentLoaded', setupEventListeners);
document.addEventListener('turbo:load', setupEventListeners);
document.addEventListener('turbo:render', setupEventListeners);

// いいね処理
function likeUser(userId, jobId) {
  fetch(`/company/matching/${userId}/like?job_id=${jobId}`, {
    method: 'POST',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      // すべてのいいねボタンを更新
      document.querySelectorAll('.like-button').forEach(button => {
        button.innerHTML = `
          <button class="unlike-btn bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-lg flex items-center">
            <i class="fas fa-heart mr-2"></i> いいね済み
          </button>
        `;
      });
      
      // イベントリスナーを再設定
      setupEventListeners();
      
      // マッチした場合はトースト表示
      if (data.matched) {
        showMatchToast(userId, data.conversation_id);
      }
    }
  })
  .catch(error => console.error('Error:', error));
}

// いいね解除処理 (APIを呼び出すが実際は何も変わらない)
function unlikeUser(userId, jobId) {
  fetch(`/company/matching/${userId}/unlike?job_id=${jobId}`, {
    method: 'DELETE',
    headers: {
      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success' && data.message) {
      // メッセージがあれば小さく表示
      const toast = document.createElement('div');
      toast.className = 'fixed bottom-4 right-4 bg-blue-500 text-white p-4 rounded-lg shadow-lg z-50';
      toast.innerHTML = `
        <div class="flex items-center">
          <i class="fas fa-info-circle mr-2"></i>
          <span>${data.message}</span>
          <button class="ml-4 text-white focus:outline-none" onclick="this.parentElement.parentElement.remove()">
            <i class="fas fa-times"></i>
          </button>
        </div>
      `;
      document.body.appendChild(toast);
      
      // 3秒後に自動的に消える
      setTimeout(() => {
        if (document.body.contains(toast)) {
          toast.remove();
        }
      }, 3000);
    }
  })
  .catch(error => console.error('Error:', error));
}

// マッチングトースト表示
function showMatchToast(userId, conversationId) {
  // トースト要素を作成
  const toast = document.createElement('div');
  toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 flex items-center';
  
  // メッセージへのリンクを含めたHTML
  let toastHtml = `
    <i class="fas fa-check-circle mr-2 text-xl"></i>
    <div>
      <div class="font-bold">マッチングしました！</div>
      <div class="text-sm">個人からもいいねがありました</div>
  `;
  
  if (conversationId) {
    toastHtml += `
      <div class="mt-2">
        <a href="/company/messages/${conversationId}" class="bg-white text-green-600 hover:bg-gray-100 px-3 py-1 rounded text-sm font-medium inline-block">
          メッセージを送る
        </a>
      </div>
    `;
  }
  
  toastHtml += `
    </div>
    <button class="ml-4 text-white focus:outline-none" onclick="this.parentElement.remove()">
      <i class="fas fa-times"></i>
    </button>
  `;
  
  toast.innerHTML = toastHtml;
  
  // トーストをドキュメントに追加
  document.body.appendChild(toast);
  
  // 8秒後に自動的に消える
  setTimeout(() => {
    if (document.body.contains(toast)) {
      toast.remove();
    }
  }, 8000);
}
</script>