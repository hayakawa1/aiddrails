<div class="bg-white shadow rounded-lg p-6">
  <h1 class="text-2xl font-bold text-gray-800 mb-6">マッチング</h1>
  
  <% if @matching_jobs.present? %>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <% @matching_jobs.each do |job| %>
        <div class="border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300">
          <div class="p-5">
            <div class="flex justify-between items-start">
              <h2 class="text-xl font-semibold text-gray-800 mb-2">
                <%= link_to job.title, individual_matching_path(job), class: "hover:text-blue-600" %>
              </h2>
              <div class="like-button" data-job-id="<%= job.id %>">
                <% if @liked_job_ids.include?(job.id) %>
                  <button class="unlike-btn text-red-500 hover:text-red-700">
                    <i class="fas fa-heart text-2xl"></i>
                  </button>
                <% else %>
                  <button class="like-btn text-gray-400 hover:text-red-500">
                    <i class="far fa-heart text-2xl"></i>
                  </button>
                <% end %>
              </div>
            </div>
            
            <div class="company-info mb-3">
              <span class="text-gray-600"><%= job.company_profile.company_name %></span>
            </div>
            
            <div class="job-meta grid grid-cols-2 gap-2 mb-4">
              <div class="flex items-center">
                <i class="fas fa-map-marker-alt text-gray-500 mr-2"></i>
                <span class="text-gray-700"><%= job.location.name %></span>
              </div>
              <div class="flex items-center">
                <i class="fas fa-briefcase text-gray-500 mr-2"></i>
                <span class="text-gray-700"><%= job.employment_type.name %></span>
              </div>
              <div class="flex items-center">
                <i class="fas fa-laptop-house text-gray-500 mr-2"></i>
                <span class="text-gray-700"><%= job.work_style.name %></span>
              </div>
              <div class="flex items-center">
                <i class="fas fa-yen-sign text-gray-500 mr-2"></i>
                <span class="text-gray-700"><%= number_to_currency(job.salary, unit: '', precision: 0) %> 万円</span>
              </div>
            </div>
            
            <div class="skills flex flex-wrap gap-2 mb-3">
              <% job.job_skills.includes(:skill).each do |job_skill| %>
                <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">
                  <%= job_skill.skill.name %> (Lv.<%= job_skill.level %>)
                </span>
              <% end %>
            </div>
            
            <div class="mt-4">
              <%= link_to "詳細を見る", individual_matching_path(job), class: "text-blue-600 hover:text-blue-800 font-medium" %>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <div class="bg-gray-50 p-4 rounded-lg mb-6">
      <p class="text-gray-600">条件に合致する求人が見つかりませんでした。</p>
      <p class="text-gray-600 mt-2">プロフィールの希望条件を見直してみてください。</p>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // いいねボタンのイベントリスナー
  document.querySelectorAll('.like-btn').forEach(button => {
    button.addEventListener('click', function() {
      const jobId = this.closest('.like-button').dataset.jobId;
      likeJob(jobId, this);
    });
  });
  
  // いいね解除ボタンのイベントリスナー
  document.querySelectorAll('.unlike-btn').forEach(button => {
    button.addEventListener('click', function() {
      const jobId = this.closest('.like-button').dataset.jobId;
      unlikeJob(jobId, this);
    });
  });
  
  // いいね処理
  function likeJob(jobId, button) {
    fetch(`/individual/matching/${jobId}/like`, {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        // ボタンの見た目を変更
        const likeButton = button.closest('.like-button');
        likeButton.innerHTML = `
          <button class="unlike-btn text-red-500 hover:text-red-700">
            <i class="fas fa-heart text-2xl"></i>
          </button>
        `;
        
        // イベントリスナーを再設定
        likeButton.querySelector('.unlike-btn').addEventListener('click', function() {
          unlikeJob(jobId, this);
        });
        
        // マッチした場合はトースト表示
        if (data.matched) {
          showMatchToast(jobId, data.conversation_id);
        }
      }
    })
    .catch(error => console.error('Error:', error));
  }
  
  // いいね解除処理
  function unlikeJob(jobId, button) {
    fetch(`/individual/matching/${jobId}/unlike`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        // ボタンの見た目を変更
        const likeButton = button.closest('.like-button');
        likeButton.innerHTML = `
          <button class="like-btn text-gray-400 hover:text-red-500">
            <i class="far fa-heart text-2xl"></i>
          </button>
        `;
        
        // イベントリスナーを再設定
        likeButton.querySelector('.like-btn').addEventListener('click', function() {
          likeJob(jobId, this);
        });
      }
    })
    .catch(error => console.error('Error:', error));
  }
  
  // マッチングトースト表示
  function showMatchToast(jobId, conversationId) {
    // トースト要素を作成
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 flex items-center';
    
    // メッセージへのリンクを含めたHTML
    let toastHtml = `
      <i class="fas fa-check-circle mr-2 text-xl"></i>
      <div>
        <div class="font-bold">マッチングしました！</div>
        <div class="text-sm">企業からもいいねがありました</div>
    `;
    
    if (conversationId) {
      toastHtml += `
        <div class="mt-2">
          <a href="/individual/messages/${conversationId}" class="bg-white text-green-600 hover:bg-gray-100 px-3 py-1 rounded text-sm font-medium inline-block">
            メッセージを見る
          </a>
        </div>
      `;
    }
    
    toastHtml += `
      </div>
      <button class="ml-4 text-white focus:outline-none" onclick="this.parentElement.remove()">
        <i class="fas fa-times"></i>
      </button>
    `;
    
    toast.innerHTML = toastHtml;
    
    // トーストをドキュメントに追加
    document.body.appendChild(toast);
    
    // 8秒後に自動的に消える
    setTimeout(() => {
      if (document.body.contains(toast)) {
        toast.remove();
      }
    }, 8000);
  }
});
</script>
