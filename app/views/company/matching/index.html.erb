<div class="bg-white shadow rounded-lg p-6">
  <h1 class="text-2xl font-bold text-gray-800 mb-6">求人マッチング</h1>
  
  <div class="mb-8">
    <h2 class="text-xl font-semibold text-gray-700 mb-4">求人を選択</h2>
    
    <form action="<%= search_company_matching_index_path %>" method="get" class="mb-6">
      <div class="flex items-center space-x-4">
        <div class="w-3/4">
          <select name="job_id" id="job_select" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
            <option value="">-- 求人を選択してください --</option>
            <% @jobs.each do |job| %>
              <option value="<%= job.id %>" <%= 'selected' if @selected_job_id.to_i == job.id %>><%= job.title %></option>
            <% end %>
          </select>
        </div>
        <div>
          <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
            検索
          </button>
        </div>
      </div>
    </form>
  </div>
  
  <% if @selected_job_id.present? %>
    <div class="mb-6">
      <h2 class="text-xl font-semibold text-gray-700 mb-4">選択中の求人: <%= @selected_job.title %></h2>
      
      <div class="bg-gray-50 p-4 rounded-lg mb-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="flex items-center">
            <i class="fas fa-map-marker-alt text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">勤務地:</span>
            <span class="text-gray-800"><%= @selected_job.location.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-briefcase text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">雇用形態:</span>
            <span class="text-gray-800"><%= @selected_job.employment_type.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-laptop-house text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">勤務形態:</span>
            <span class="text-gray-800"><%= @selected_job.work_style.name %></span>
          </div>
          <div class="flex items-center">
            <i class="fas fa-yen-sign text-gray-500 mr-2"></i>
            <span class="font-medium text-gray-600 mr-2">給与:</span>
            <span class="text-gray-800"><%= number_to_currency(@selected_job.salary_min, unit: '万円〜', precision: 0) %></span>
          </div>
        </div>
      </div>
    </div>
    
    <h2 class="text-xl font-semibold text-gray-700 mb-4">マッチング候補者</h2>
    
    <% if @matching_users.present? %>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <% @matching_users.each do |user| %>
          <div class="border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300">
            <div class="p-5">
              <div class="flex justify-between items-start">
                <h3 class="text-lg font-semibold text-gray-800 mb-2">
                  <% if user.individual_profile&.display_name.present? %>
                    <%= user.individual_profile.display_name %>
                  <% else %>
                    <%= user.user_id %>
                  <% end %>
                </h3>
                <div class="like-button" data-user-id="<%= user.id %>" data-job-id="<%= @selected_job_id %>">
                  <% if @liked_user_ids.include?(user.id) %>
                    <button class="unlike-btn text-red-500 hover:text-red-700">
                      <i class="fas fa-heart text-2xl"></i>
                    </button>
                  <% else %>
                    <button class="like-btn text-gray-400 hover:text-red-500">
                      <i class="far fa-heart text-2xl"></i>
                    </button>
                  <% end %>
                </div>
              </div>
              
              <div class="user-meta grid grid-cols-2 gap-2 mb-4">
                <% if user.individual_profile&.desired_salary.present? %>
                  <div class="flex items-center">
                    <i class="fas fa-yen-sign text-gray-500 mr-2"></i>
                    <span class="text-gray-700">希望年収: <%= user.individual_profile.desired_salary %>万円</span>
                  </div>
                <% end %>
              </div>
              
              <div class="skills flex flex-wrap gap-2 mb-3">
                <% user.user_skills.includes(:skill).each do |user_skill| %>
                  <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">
                    <%= user_skill.skill.name %> (Lv.<%= user_skill.level %>)
                  </span>
                <% end %>
              </div>
              
              <div class="mt-4">
                <%= link_to "詳細を見る", company_matching_path(user, job_id: @selected_job_id), class: "text-blue-600 hover:text-blue-800 font-medium" %>
              </div>
            </div>
          </div>
        <% end %>
      </div>
    <% else %>
      <div class="bg-gray-50 p-4 rounded-lg mb-6">
        <p class="text-gray-600">条件に合致する候補者が見つかりませんでした。</p>
        <p class="text-gray-600 mt-2">求人の条件を見直してみてください。</p>
      </div>
    <% end %>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // いいねボタンのイベントリスナー
  document.querySelectorAll('.like-btn').forEach(button => {
    button.addEventListener('click', function() {
      const userId = this.closest('.like-button').dataset.userId;
      const jobId = this.closest('.like-button').dataset.jobId;
      likeUser(userId, jobId, this);
    });
  });
  
  // いいね解除ボタンのイベントリスナー
  document.querySelectorAll('.unlike-btn').forEach(button => {
    button.addEventListener('click', function() {
      const userId = this.closest('.like-button').dataset.userId;
      const jobId = this.closest('.like-button').dataset.jobId;
      unlikeUser(userId, jobId, this);
    });
  });
  
  // いいね処理
  function likeUser(userId, jobId, button) {
    fetch(`/company/matching/${userId}/like?job_id=${jobId}`, {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        // ボタンの見た目を変更
        const likeButton = button.closest('.like-button');
        likeButton.innerHTML = `
          <button class="unlike-btn text-red-500 hover:text-red-700">
            <i class="fas fa-heart text-2xl"></i>
          </button>
        `;
        
        // イベントリスナーを再設定
        likeButton.querySelector('.unlike-btn').addEventListener('click', function() {
          unlikeUser(userId, jobId, this);
        });
        
        // マッチした場合はトースト表示
        if (data.matched) {
          showMatchToast(userId, data.conversation_id);
        }
      }
    })
    .catch(error => console.error('Error:', error));
  }
  
  // いいね解除処理
  function unlikeUser(userId, jobId, button) {
    fetch(`/company/matching/${userId}/unlike?job_id=${jobId}`, {
      method: 'DELETE',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'success') {
        // ボタンの見た目を変更
        const likeButton = button.closest('.like-button');
        likeButton.innerHTML = `
          <button class="like-btn text-gray-400 hover:text-red-500">
            <i class="far fa-heart text-2xl"></i>
          </button>
        `;
        
        // イベントリスナーを再設定
        likeButton.querySelector('.like-btn').addEventListener('click', function() {
          likeUser(userId, jobId, this);
        });
      }
    })
    .catch(error => console.error('Error:', error));
  }
  
  // マッチングトースト表示
  function showMatchToast(userId, conversationId) {
    // トースト要素を作成
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50 flex items-center';
    
    // メッセージへのリンクを含めたHTML
    let toastHtml = `
      <i class="fas fa-check-circle mr-2 text-xl"></i>
      <div>
        <div class="font-bold">マッチングしました！</div>
        <div class="text-sm">個人からもいいねがありました</div>
    `;
    
    if (conversationId) {
      toastHtml += `
        <div class="mt-2">
          <a href="/company/messages/${conversationId}" class="bg-white text-green-600 hover:bg-gray-100 px-3 py-1 rounded text-sm font-medium inline-block">
            メッセージを送る
          </a>
        </div>
      `;
    }
    
    toastHtml += `
      </div>
      <button class="ml-4 text-white focus:outline-none" onclick="this.parentElement.remove()">
        <i class="fas fa-times"></i>
      </button>
    `;
    
    toast.innerHTML = toastHtml;
    
    // トーストをドキュメントに追加
    document.body.appendChild(toast);
    
    // 8秒後に自動的に消える
    setTimeout(() => {
      if (document.body.contains(toast)) {
        toast.remove();
      }
    }, 8000);
  }
});
</script>
